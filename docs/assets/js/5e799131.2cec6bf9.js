"use strict";(self.webpackChunkscanmate=self.webpackChunkscanmate||[]).push([[437],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>g});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),c=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},m=function(e){var t=c(e.components);return n.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},l=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=c(r),l=a,g=u["".concat(p,".").concat(l)]||u[l]||d[l]||o;return r?n.createElement(g,i(i({ref:t},m),{},{components:r})):n.createElement(g,i({ref:t},m))}));function g(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=l;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}l.displayName="MDXCreateElement"},2177:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=r(7462),a=(r(7294),r(3905));const o={sidebar_position:3,id:"Compute SIFT",description:"Extract Features from Images.",slug:"/under-the-hood/compute-sift"},i=void 0,s={unversionedId:"under-the-hood/Compute SIFT",id:"under-the-hood/Compute SIFT",title:"Compute SIFT",description:"Extract Features from Images.",source:"@site/docs/under-the-hood/compute_sift.md",sourceDirName:"under-the-hood",slug:"/under-the-hood/compute-sift",permalink:"/under-the-hood/compute-sift",draft:!1,editUrl:"https://github.com/ZiadMansourM/photogrammetry/tree/main/docs/under-the-hood/compute_sift.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,id:"Compute SIFT",description:"Extract Features from Images.",slug:"/under-the-hood/compute-sift"},sidebar:"tutorialSidebar",previous:{title:"Prepare Images",permalink:"/under-the-hood/prepare-images"},next:{title:"Image Matching",permalink:"/under-the-hood/image-matching"}},p={},c=[{value:"\ud83d\udcdd Compute SIFT",id:"-compute-sift",level:2}],m={toc:c},u="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"-compute-sift"},"\ud83d\udcdd Compute SIFT"),(0,a.kt)("ul",{className:"contains-task-list"},(0,a.kt)("li",{parentName:"ul",className:"task-list-item"},(0,a.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Proccess/Extract keypoints and descriptors from each image."),(0,a.kt)("li",{parentName:"ul",className:"task-list-item"},(0,a.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Populate ",(0,a.kt)("inlineCode",{parentName:"li"},"Images")," data structure accordingly.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},'@timeit\ndef compute_keypoints_descriptors(images: list[Image], SIFT: OpenCV.SIFT, **kwargs) -> None:\n    image_set_name = kwargs[\'image_set_name\']\n    data_path = f"../../data/{image_set_name}"\n    for img in images.images:\n        keypoints: list[OpenCV.KeyPoint]\n        descriptors: np.ndarray\n        dialated_image = OpenCV.bitwise_and(img.gray_image, img.gray_image, mask=img.mask)\n        keypoints, descriptors = SIFT.detectAndCompute(dialated_image, None)\n        img.keypoints = keypoints\n        img.descriptors = descriptors\n        log_to_file(f"{data_path}/logs/tune.log", f"Img({img.img_id}, {img.path}) has {len(img.keypoints)} keypoints and {len(img.descriptors)} descriptors.")\n')))}d.isMDXComponent=!0}}]);