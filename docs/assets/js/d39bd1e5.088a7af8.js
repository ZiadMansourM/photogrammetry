"use strict";(self.webpackChunkscanmate=self.webpackChunkscanmate||[]).push([[112],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>h});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var c=r.createContext({}),m=function(e){var t=r.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},u=function(e){var t=m(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=m(a),d=n,h=p["".concat(c,".").concat(d)]||p[d]||l[d]||i;return a?r.createElement(h,o(o({ref:t},u),{},{components:a})):r.createElement(h,o({ref:t},u))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[p]="string"==typeof e?e:n,o[1]=s;for(var m=2;m<i;m++)o[m]=a[m];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},130:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>i,metadata:()=>s,toc:()=>m});var r=a(7462),n=(a(7294),a(3905));const i={sidebar_position:5,id:"Feature Matching",description:"Match similar features between two images.",slug:"/under-the-hood/feature-matching"},o=void 0,s={unversionedId:"under-the-hood/Feature Matching",id:"under-the-hood/Feature Matching",title:"Feature Matching",description:"Match similar features between two images.",source:"@site/docs/under-the-hood/feature-matching.md",sourceDirName:"under-the-hood",slug:"/under-the-hood/feature-matching",permalink:"/under-the-hood/feature-matching",draft:!1,editUrl:"https://github.com/ZiadMansourM/photogrammetry/tree/main/docs/under-the-hood/feature-matching.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,id:"Feature Matching",description:"Match similar features between two images.",slug:"/under-the-hood/feature-matching"},sidebar:"tutorialSidebar",previous:{title:"Image Matching",permalink:"/under-the-hood/image-matching"},next:{title:"Trangulation",permalink:"/under-the-hood/trangulation"}},c={},m=[{value:"\ud83d\udcdd Feature Matching",id:"-feature-matching",level:2}],u={toc:m},p="wrapper";function l(e){let{components:t,...a}=e;return(0,n.kt)(p,(0,r.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"-feature-matching"},"\ud83d\udcdd Feature Matching"),(0,n.kt)("ul",{className:"contains-task-list"},(0,n.kt)("li",{parentName:"ul",className:"task-list-item"},(0,n.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","For each image pair we use ",(0,n.kt)("inlineCode",{parentName:"li"},"crossCheck BFMatcher")," to match corresponding features."),(0,n.kt)("li",{parentName:"ul",className:"task-list-item"},(0,n.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Populate/Update ",(0,n.kt)("inlineCode",{parentName:"li"},"Images")," data structure accordingly."),(0,n.kt)("li",{parentName:"ul",className:"task-list-item"},(0,n.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","We use RANSAC to remove outliers. ")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-py"},'@timeit\ndef feature_matching(\n        img_one_descriptors: np.ndarray, \n        img_two_descriptors: np.ndarray,\n        **kwargs\n    ) -> list[OpenCV.DMatch]:\n    matcher = OpenCV.BFMatcher(crossCheck=True)\n    return matcher.match(img_one_descriptors, img_two_descriptors)\n\n@timeit\ndef apply_ransac(matches, keypoints1, keypoints2, threshold = 3.0, **kwargs):\n    src_pts = np.float32([keypoints1[m.queryIdx].pt for m in matches]).reshape(-1, 1, 2)\n    dst_pts = np.float32([keypoints2[m.trainIdx].pt for m in matches]).reshape(-1, 1, 2)\n    _, mask = OpenCV.findHomography(src_pts, dst_pts, OpenCV.RANSAC, threshold)\n    matches_mask = mask.ravel().tolist()\n    return [m for m, keep in zip(matches, matches_mask) if keep]\n\n\n@timeit\ndef data_feature_matching(images: Images, **kwargs) -> None:\n    import itertools\n    image_set_name = kwargs[\'image_set_name\']\n    data_path: str = f"../../data/{image_set_name}"\n    for key, values in images.similar_images.items():\n        log_to_file(f"{data_path}/logs/tune.log", f"Started Feature Match for cluster number {key}:")\n        for image, matched_image in itertools.combinations(values, 2):\n            feature_matching_output = feature_matching(image.descriptors, matched_image.descriptors, **kwargs)\n            ransac_output = apply_ransac(feature_matching_output, image.keypoints, matched_image.keypoints, threshold=150, **kwargs)\n            images.feature_matches.append(FeatureMatches(image, matched_image, ransac_output))\n            log_to_file(f"{data_path}/logs/tune.log", f"({image.img_id}, {matched_image.img_id}) with {len(ransac_output)} / {len(feature_matching_output)}.")\n')))}l.isMDXComponent=!0}}]);